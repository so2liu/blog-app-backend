{"version":3,"sources":["services/auth.ts","pages/Login.tsx","hooks/basic/useLocalStorage.ts","utils/config.ts","hooks/useUser.ts","utils/index.ts","services/user.ts","pages/Signup.tsx","pages/Logout.tsx","utils/PrettyJSON.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["server","axios","create","credentials","a","post","res","addTokenToServer","data","token","get","status","console","log","authService","login","validateToken","headers","Authorization","Login","props","setUser","setMessage","useImmer","username","password","loginInfo","setLoginInfo","e","preventDefault","user","message","response","error","display","type","setTimeout","prev","onSubmit","name","id","onBlur","value","target","draft","useLocalStorage","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","storedValue","setStoredValue","valueToStore","Function","setItem","stringify","removeItem","config","localStorageKey","useUserWithToken","initUser","displayName","storedUser","setStoredUser","clearStoredUser","useEffect","loginService","then","result","show","toShow","prefix","userService","signup","Signup","confirmPassword","signupInfo","setSignupInfo","handleConfirmPassword","confirm","Logout","onClick","PrettyJSON","json","style","maxWidth","overflow","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.975ce6c5.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport let server = axios.create();\n\nconst baseURL = \"/api/auth\";\n\nasync function login(credentials: { username: string; password: string }) {\n  const res = await server.post<InputLogin>(`${baseURL}/login`, credentials);\n  addTokenToServer(res.data.token);\n  return res.data;\n}\n\nasync function validateToken(token: string) {\n  try {\n    addTokenToServer(token);\n    const res = await server.get(`${baseURL}/validate`);\n    return res.status === 200;\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nconst authService = { login, validateToken };\nexport default authService;\n\nexport const addTokenToServer = (token: string) => {\n  const headers = {\n    Authorization: `bearer ${token}`,\n  };\n  server = axios.create({ headers });\n};\n\ninterface InputLogin {\n  username: string;\n  displayName: string;\n  token: string;\n}\n","import React from \"react\";\nimport { useImmer } from \"use-immer\";\nimport authService from \"../services/auth\";\nimport { IUser, IMessage } from \"../App\";\n\nfunction Login(props: {\n  setUser: React.Dispatch<React.SetStateAction<IUser>>;\n  setMessage: React.Dispatch<React.SetStateAction<IMessage>>;\n}) {\n  const { setUser, setMessage } = props;\n\n  const [loginInfo, setLoginInfo] = useImmer({ username: \"\", password: \"\" });\n\n  async function handleLogin(e: React.FormEvent) {\n    e.preventDefault();\n    console.log(\"log in with\", loginInfo);\n    try {\n      const user = await authService.login(loginInfo);\n      setUser(user);\n    } catch (e) {\n      setMessage({\n        message: e.response.data.error,\n        display: true,\n        type: \"error\",\n      });\n      setTimeout(() => {\n        setMessage((prev) => ({ ...prev, display: false }));\n      }, 5000);\n    }\n  }\n\n  return (\n    <div>\n      <h2>Login</h2>\n\n      <form onSubmit={handleLogin}>\n        <div>\n          username\n          <input\n            type=\"text\"\n            name=\"username\"\n            id=\"loginUsername\"\n            onBlur={(e) => {\n              const value = e.target.value;\n              setLoginInfo((draft) => {\n                draft.username = value;\n              });\n            }}\n          />\n        </div>\n        <div>\n          password\n          <input\n            type=\"password\"\n            name=\"password\"\n            id=\"loginPassword\"\n            onBlur={(e) => {\n              const value = e.target.value;\n              setLoginInfo((draft) => {\n                draft.password = value;\n              });\n            }}\n          />\n        </div>\n        <button type=\"submit\">Login</button>\n      </form>\n    </div>\n  );\n}\n\nexport default Login;\n","import { useState } from \"react\";\n\nfunction useLocalStorage<T>(key: string, initialValue: T) {\n  type Callback = (v: T) => T;\n\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (e) {\n      console.error(e);\n      return initialValue;\n    }\n  });\n\n  const setValue = (value: object | string | Callback) => {\n    try {\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (e) {\n      console.log(e);\n      throw e;\n    }\n  };\n\n  const clearValue = () => {\n    try {\n      window.localStorage.removeItem(key);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  return [storedValue, setValue, clearValue];\n}\n\nexport default useLocalStorage;\n","const localStorageKey = {\n  user: \"user\",\n};\n\nconst config = { localStorageKey };\n\nexport default config;\n","import { useState, useEffect } from \"react\";\nimport useLocalStorage from \"./basic/useLocalStorage\";\nimport { IUser } from \"../App\";\nimport loginService, { addTokenToServer } from \"../services/auth\";\nimport config from \"../utils/config\";\n\nfunction useUserWithToken(\n  initUser: IUser = {\n    username: \"\",\n    displayName: \"\",\n    token: \"\",\n  }\n): [IUser, React.Dispatch<React.SetStateAction<IUser>>] {\n  const [storedUser, setStoredUser, clearStoredUser] = useLocalStorage<IUser>(\n    config.localStorageKey.user,\n    initUser\n  );\n  const [user, setUser] = useState(storedUser.token ? storedUser : initUser);\n\n  // Validate token in localStorage & add it to header\n  useEffect(() => {\n    if (user.token !== \"\")\n      loginService.validateToken(user.token).then((result) => {\n        if (result) addTokenToServer(user.token);\n        else {\n          setUser(initUser);\n          clearStoredUser();\n        }\n      });\n  }, [clearStoredUser, initUser, user.token]);\n\n  // Save for changed user\n  useEffect(() => {\n    if (user.token !== \"\") setStoredUser(user);\n    else clearStoredUser();\n  }, [user, setStoredUser, clearStoredUser]);\n\n  return [user, setUser];\n}\n\nexport default useUserWithToken;\n","export const show = <T>(toShow: T, prefix: string = \"\"): T => {\n  console.log(prefix, toShow);\n  return toShow;\n};\n","import { server } from \"./auth\";\nimport { show } from \"../utils\";\nconst baseURL = \"/api/users\";\n\nasync function signup(user: {\n  username: string;\n  displayName: string;\n  password: string;\n}) {\n  const res = await server.post<SignupUser>(baseURL, show(user));\n  return res.data;\n}\n\nconst userService = { signup };\nexport default userService;\n\n// TS Types\nexport interface InputUser {\n  blogs: string[];\n  username: string;\n  displayName: string;\n  id: string;\n}\n\nexport interface SignupUser extends InputUser {\n  token: string;\n}\n","import React from \"react\";\nimport { useImmer } from \"use-immer\";\nimport userService from \"../services/user\";\nimport { IUser, IMessage } from \"../App\";\nimport { show } from \"../utils\";\n\nfunction Signup(props: {\n  setUser: React.Dispatch<React.SetStateAction<IUser>>;\n  setMessage: React.Dispatch<React.SetStateAction<IMessage>>;\n}) {\n  const { setUser, setMessage } = props;\n\n  const [signupInfo, setSignupInfo] = useImmer({\n    username: \"\",\n    displayName: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  });\n\n  async function handleSignup(e: React.FormEvent) {\n    e.preventDefault();\n    if (!handleConfirmPassword(signupInfo.password, signupInfo.confirmPassword))\n      return;\n\n    try {\n      const user = await userService.signup(signupInfo);\n      show(user);\n      setUser(user);\n    } catch (e) {\n      setMessage({\n        message: e.response.data.error,\n        display: true,\n        type: \"error\",\n      });\n    }\n  }\n\n  function handleConfirmPassword(\n    password: string,\n    confirmPassword: string\n  ): boolean {\n    const confirm = password === confirmPassword;\n    if (confirm) setMessage((prev) => ({ ...prev, display: false }));\n    else\n      setMessage({\n        type: \"error\",\n        message: \"Two passwords are not same.\",\n        display: true,\n      });\n    return confirm;\n  }\n\n  return (\n    <div>\n      <h2>Signup</h2>\n\n      <form onSubmit={handleSignup}>\n        <div>\n          username\n          <input\n            type=\"text\"\n            name=\"username\"\n            id=\"signupUsername\"\n            onBlur={(e) => {\n              const value = e.target.value;\n              setSignupInfo((draft) => {\n                draft.username = value;\n              });\n            }}\n          />\n        </div>\n        <div>\n          display name\n          <input\n            type=\"text\"\n            name=\"displayname\"\n            id=\"signupDisplayName\"\n            onBlur={(e) => {\n              const value = e.target.value;\n              setSignupInfo((draft) => {\n                draft.displayName = value;\n              });\n            }}\n          />\n        </div>\n        <div>\n          password\n          <input\n            type=\"password\"\n            name=\"password\"\n            id=\"signupPassword\"\n            onBlur={(e) => {\n              const value = e.target.value;\n              setSignupInfo((draft) => {\n                draft.password = value;\n              });\n            }}\n          />\n        </div>\n        <div>\n          password\n          <input\n            type=\"password\"\n            name=\"password\"\n            id=\"signupPassword\"\n            onBlur={(e) => {\n              const value = e.target.value;\n              setSignupInfo((draft) => {\n                draft.confirmPassword = value;\n              });\n              handleConfirmPassword(signupInfo.password, value);\n            }}\n          />\n        </div>\n        <button type=\"submit\">Login</button>\n      </form>\n    </div>\n  );\n}\n\nexport default Signup;\n","import React from \"react\";\nimport { IUser } from \"../App\";\n\nfunction Logout(props: {\n  setUser: React.Dispatch<React.SetStateAction<IUser>>;\n}) {\n  const { setUser } = props;\n  function handleLogout() {\n    setUser({ username: \"\", displayName: \"\", token: \"\" });\n  }\n\n  return (\n    <div>\n      <button onClick={handleLogout}>Logout</button>\n    </div>\n  );\n}\n\nexport default Logout;\n","import React from \"react\";\n\nfunction PrettyJSON(props: { json: object }) {\n  const { json } = props;\n  return (\n    <div>\n      <pre style={{ maxWidth: \"100%\", overflow: \"auto\" }}>\n        {JSON.stringify(json, null, 2)}\n      </pre>\n    </div>\n  );\n}\n\nexport default PrettyJSON;\n","import React, { useState } from \"react\";\nimport Login from \"./pages/Login\";\nimport useUserWithToken from \"./hooks/useUser\";\nimport Signup from \"./pages/Signup\";\nimport Logout from \"./pages/Logout\";\nimport PrettyJSON from \"./utils/PrettyJSON\";\n\nfunction App() {\n  const [user, setUser] = useUserWithToken();\n\n  const [message, setMessage] = useState<IMessage>({\n    display: false,\n    message: \"\",\n    type: \"error\",\n  });\n\n  return (\n    <>\n      <PrettyJSON json={user} />\n      <h1>Blog App</h1>\n      <strong>{user.displayName}</strong>\n      {message.display && <strong>{message.message}</strong>}\n      <Login setUser={setUser} setMessage={setMessage} />\n      <Logout setUser={setUser} />\n      <Signup setUser={setUser} setMessage={setMessage} />\n    </>\n  );\n}\n\nexport default App;\n\n// TS Types / Interfaces\n\nexport interface IUser {\n  username: string;\n  displayName: string;\n  token: string;\n}\n\nexport interface IMessage {\n  display: boolean;\n  message: string;\n  type: \"error\" | \"warning\" | \"success\";\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}